
gpio-led-effect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000784  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800091c  0800091c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800091c  0800091c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800091c  0800091c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800091c  0800091c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800091c  0800091c  0001091c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000920  08000920  00010920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000930  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000930  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002552  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000098f  00000000  00000000  0002258e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000338  00000000  00000000  00022f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002d0  00000000  00000000  00023258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f82  00000000  00000000  00023528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003e59  00000000  00000000  000374aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ea01  00000000  00000000  0003b303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9d04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b20  00000000  00000000  000b9d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000904 	.word	0x08000904

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000904 	.word	0x08000904

080001d8 <main>:
void gpio_led_effect_4(uint8_t n);
void gpio_led_effect_5();
void gpio_led_effect_6();

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001dc:	f000 f9f2 	bl	80005c4 <HAL_Init>
	gpio_led_init();
 80001e0:	f000 f812 	bl	8000208 <gpio_led_init>

	while (1)
	{
		gpio_led_effect_6();
 80001e4:	f000 f920 	bl	8000428 <gpio_led_effect_6>
		gpio_led_effect_4(3);
 80001e8:	2003      	movs	r0, #3
 80001ea:	f000 f8f5 	bl	80003d8 <gpio_led_effect_4>
		gpio_led_effect_1(1);
 80001ee:	2001      	movs	r0, #1
 80001f0:	f000 f85e 	bl	80002b0 <gpio_led_effect_1>
		gpio_led_effect_2(1);
 80001f4:	2001      	movs	r0, #1
 80001f6:	f000 f88f 	bl	8000318 <gpio_led_effect_2>
		gpio_led_effect_4(3);
 80001fa:	2003      	movs	r0, #3
 80001fc:	f000 f8ec 	bl	80003d8 <gpio_led_effect_4>
		gpio_led_effect_3();
 8000200:	f000 f8be 	bl	8000380 <gpio_led_effect_3>
		gpio_led_effect_6();
 8000204:	e7ee      	b.n	80001e4 <main+0xc>
	...

08000208 <gpio_led_init>:
 * @brief	: initialize D.12, D.13, D.14, D.15 as leds on-board
 * @param	: None
 * @retval	: None
 */
void gpio_led_init()
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800020e:	2300      	movs	r3, #0
 8000210:	603b      	str	r3, [r7, #0]
 8000212:	4b10      	ldr	r3, [pc, #64]	; (8000254 <gpio_led_init+0x4c>)
 8000214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000216:	4a0f      	ldr	r2, [pc, #60]	; (8000254 <gpio_led_init+0x4c>)
 8000218:	f043 0308 	orr.w	r3, r3, #8
 800021c:	6313      	str	r3, [r2, #48]	; 0x30
 800021e:	4b0d      	ldr	r3, [pc, #52]	; (8000254 <gpio_led_init+0x4c>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	f003 0308 	and.w	r3, r3, #8
 8000226:	603b      	str	r3, [r7, #0]
 8000228:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  uint32_t *GPIOD_MODER = (uint32_t *)(0x40020c00 + 0x00);
 800022a:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <gpio_led_init+0x50>)
 800022c:	607b      	str	r3, [r7, #4]
  *GPIOD_MODER &= ~(0b11111111<<24);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]
  *GPIOD_MODER |= (0b01010101<<24);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f043 42aa 	orr.w	r2, r3, #1426063360	; 0x55000000
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	601a      	str	r2, [r3, #0]
}
 8000246:	bf00      	nop
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	40023800 	.word	0x40023800
 8000258:	40020c00 	.word	0x40020c00

0800025c <gpio_led_write>:
 * 		@arg 1 : ON
 * 		@arg 0 : OFF
 * @retval	: None
 */
void gpio_led_write(uint8_t LED_x, uint8_t state)
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	460a      	mov	r2, r1
 8000266:	71fb      	strb	r3, [r7, #7]
 8000268:	4613      	mov	r3, r2
 800026a:	71bb      	strb	r3, [r7, #6]
  uint32_t *GPIOD_ODR = (uint32_t *)(0x40020c00 + 0x14);
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <gpio_led_write+0x50>)
 800026e:	60fb      	str	r3, [r7, #12]
  if (state == 1)
 8000270:	79bb      	ldrb	r3, [r7, #6]
 8000272:	2b01      	cmp	r3, #1
 8000274:	d109      	bne.n	800028a <gpio_led_write+0x2e>
	  *GPIOD_ODR |= (1 << LED_x);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	79fa      	ldrb	r2, [r7, #7]
 800027c:	2101      	movs	r1, #1
 800027e:	fa01 f202 	lsl.w	r2, r1, r2
 8000282:	431a      	orrs	r2, r3
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	601a      	str	r2, [r3, #0]
  else
	  *GPIOD_ODR &= ~(1 << LED_x);
}
 8000288:	e009      	b.n	800029e <gpio_led_write+0x42>
	  *GPIOD_ODR &= ~(1 << LED_x);
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	79fa      	ldrb	r2, [r7, #7]
 8000290:	2101      	movs	r1, #1
 8000292:	fa01 f202 	lsl.w	r2, r1, r2
 8000296:	43d2      	mvns	r2, r2
 8000298:	401a      	ands	r2, r3
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	601a      	str	r2, [r3, #0]
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40020c14 	.word	0x40020c14

080002b0 <gpio_led_effect_1>:

void gpio_led_effect_1(uint8_t n)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  uint32_t *GPIOD_ODR = (uint32_t *)(0x40020c00 + 0x14);
 80002ba:	4b16      	ldr	r3, [pc, #88]	; (8000314 <gpio_led_effect_1+0x64>)
 80002bc:	60bb      	str	r3, [r7, #8]
  uint8_t i, j;
  for(i = 0; i < n; i++)
 80002be:	2300      	movs	r3, #0
 80002c0:	73fb      	strb	r3, [r7, #15]
 80002c2:	e01d      	b.n	8000300 <gpio_led_effect_1+0x50>
  {
	  for(j = 12; j < 16; j++)
 80002c4:	230c      	movs	r3, #12
 80002c6:	73bb      	strb	r3, [r7, #14]
 80002c8:	e00e      	b.n	80002e8 <gpio_led_effect_1+0x38>
	  {
		  *GPIOD_ODR |= (1 << j);
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	7bba      	ldrb	r2, [r7, #14]
 80002d0:	2101      	movs	r1, #1
 80002d2:	fa01 f202 	lsl.w	r2, r1, r2
 80002d6:	431a      	orrs	r2, r3
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	601a      	str	r2, [r3, #0]
		  HAL_Delay(200);
 80002dc:	20c8      	movs	r0, #200	; 0xc8
 80002de:	f000 f9e3 	bl	80006a8 <HAL_Delay>
	  for(j = 12; j < 16; j++)
 80002e2:	7bbb      	ldrb	r3, [r7, #14]
 80002e4:	3301      	adds	r3, #1
 80002e6:	73bb      	strb	r3, [r7, #14]
 80002e8:	7bbb      	ldrb	r3, [r7, #14]
 80002ea:	2b0f      	cmp	r3, #15
 80002ec:	d9ed      	bls.n	80002ca <gpio_led_effect_1+0x1a>
	  }
	  *GPIOD_ODR = 0x00;
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
	  HAL_Delay(200);
 80002f4:	20c8      	movs	r0, #200	; 0xc8
 80002f6:	f000 f9d7 	bl	80006a8 <HAL_Delay>
  for(i = 0; i < n; i++)
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	3301      	adds	r3, #1
 80002fe:	73fb      	strb	r3, [r7, #15]
 8000300:	7bfa      	ldrb	r2, [r7, #15]
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	429a      	cmp	r2, r3
 8000306:	d3dd      	bcc.n	80002c4 <gpio_led_effect_1+0x14>
  }
}
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40020c14 	.word	0x40020c14

08000318 <gpio_led_effect_2>:

void gpio_led_effect_2(uint8_t n)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
	  uint32_t *GPIOD_ODR = (uint32_t *)(0x40020c00 + 0x14);
 8000322:	4b16      	ldr	r3, [pc, #88]	; (800037c <gpio_led_effect_2+0x64>)
 8000324:	60bb      	str	r3, [r7, #8]
	  uint8_t i, j;
	  for(i = 0; i < n; i++)
 8000326:	2300      	movs	r3, #0
 8000328:	73fb      	strb	r3, [r7, #15]
 800032a:	e01d      	b.n	8000368 <gpio_led_effect_2+0x50>
	  {
		  for(j = 15; j > 11; j--)
 800032c:	230f      	movs	r3, #15
 800032e:	73bb      	strb	r3, [r7, #14]
 8000330:	e00e      	b.n	8000350 <gpio_led_effect_2+0x38>
		  {
			  *GPIOD_ODR |= (1 << j);
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	7bba      	ldrb	r2, [r7, #14]
 8000338:	2101      	movs	r1, #1
 800033a:	fa01 f202 	lsl.w	r2, r1, r2
 800033e:	431a      	orrs	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	601a      	str	r2, [r3, #0]
			  HAL_Delay(200);
 8000344:	20c8      	movs	r0, #200	; 0xc8
 8000346:	f000 f9af 	bl	80006a8 <HAL_Delay>
		  for(j = 15; j > 11; j--)
 800034a:	7bbb      	ldrb	r3, [r7, #14]
 800034c:	3b01      	subs	r3, #1
 800034e:	73bb      	strb	r3, [r7, #14]
 8000350:	7bbb      	ldrb	r3, [r7, #14]
 8000352:	2b0b      	cmp	r3, #11
 8000354:	d8ed      	bhi.n	8000332 <gpio_led_effect_2+0x1a>
		  }
		  *GPIOD_ODR = 0x00;
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
		  HAL_Delay(200);
 800035c:	20c8      	movs	r0, #200	; 0xc8
 800035e:	f000 f9a3 	bl	80006a8 <HAL_Delay>
	  for(i = 0; i < n; i++)
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	3301      	adds	r3, #1
 8000366:	73fb      	strb	r3, [r7, #15]
 8000368:	7bfa      	ldrb	r2, [r7, #15]
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	429a      	cmp	r2, r3
 800036e:	d3dd      	bcc.n	800032c <gpio_led_effect_2+0x14>
	  }
}
 8000370:	bf00      	nop
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40020c14 	.word	0x40020c14

08000380 <gpio_led_effect_3>:

void gpio_led_effect_3()
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
	uint8_t i = 200;
 8000386:	23c8      	movs	r3, #200	; 0xc8
 8000388:	71fb      	strb	r3, [r7, #7]
	while (i > 0)
 800038a:	e01d      	b.n	80003c8 <gpio_led_effect_3+0x48>
	{
		for(uint8_t j = 12; j < 16; j++)
 800038c:	230c      	movs	r3, #12
 800038e:	71bb      	strb	r3, [r7, #6]
 8000390:	e014      	b.n	80003bc <gpio_led_effect_3+0x3c>
		{
			gpio_led_write(j, 1);
 8000392:	79bb      	ldrb	r3, [r7, #6]
 8000394:	2101      	movs	r1, #1
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ff60 	bl	800025c <gpio_led_write>
			HAL_Delay(i);
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f982 	bl	80006a8 <HAL_Delay>
			gpio_led_write(j, 0);
 80003a4:	79bb      	ldrb	r3, [r7, #6]
 80003a6:	2100      	movs	r1, #0
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ff57 	bl	800025c <gpio_led_write>
			HAL_Delay(i);
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 f979 	bl	80006a8 <HAL_Delay>
		for(uint8_t j = 12; j < 16; j++)
 80003b6:	79bb      	ldrb	r3, [r7, #6]
 80003b8:	3301      	adds	r3, #1
 80003ba:	71bb      	strb	r3, [r7, #6]
 80003bc:	79bb      	ldrb	r3, [r7, #6]
 80003be:	2b0f      	cmp	r3, #15
 80003c0:	d9e7      	bls.n	8000392 <gpio_led_effect_3+0x12>
		}

		i -= 20;
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	3b14      	subs	r3, #20
 80003c6:	71fb      	strb	r3, [r7, #7]
	while (i > 0)
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d1de      	bne.n	800038c <gpio_led_effect_3+0xc>
	}
}
 80003ce:	bf00      	nop
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <gpio_led_effect_4>:

void gpio_led_effect_4(uint8_t n)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
	  uint32_t *GPIOD_ODR = (uint32_t *)(0x40020c00 + 0x14);
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <gpio_led_effect_4+0x4c>)
 80003e4:	60bb      	str	r3, [r7, #8]
	  for(uint8_t i = 0; i <= n; i++)
 80003e6:	2300      	movs	r3, #0
 80003e8:	73fb      	strb	r3, [r7, #15]
 80003ea:	e011      	b.n	8000410 <gpio_led_effect_4+0x38>
	  {
		  *GPIOD_ODR |= (0b1111<<12);
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f443 4270 	orr.w	r2, r3, #61440	; 0xf000
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	601a      	str	r2, [r3, #0]
		  HAL_Delay(50);
 80003f8:	2032      	movs	r0, #50	; 0x32
 80003fa:	f000 f955 	bl	80006a8 <HAL_Delay>
		  *GPIOD_ODR = 0x00;
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
		  HAL_Delay(50);
 8000404:	2032      	movs	r0, #50	; 0x32
 8000406:	f000 f94f 	bl	80006a8 <HAL_Delay>
	  for(uint8_t i = 0; i <= n; i++)
 800040a:	7bfb      	ldrb	r3, [r7, #15]
 800040c:	3301      	adds	r3, #1
 800040e:	73fb      	strb	r3, [r7, #15]
 8000410:	7bfa      	ldrb	r2, [r7, #15]
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	429a      	cmp	r2, r3
 8000416:	d9e9      	bls.n	80003ec <gpio_led_effect_4+0x14>
	  }
}
 8000418:	bf00      	nop
 800041a:	bf00      	nop
 800041c:	3710      	adds	r7, #16
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40020c14 	.word	0x40020c14

08000428 <gpio_led_effect_6>:
		  HAL_Delay(200);
	  }
}

void gpio_led_effect_6()
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
	uint32_t *GPIOD_ODR = (uint32_t *)(0x40020c00 + 0x14);
 800042e:	4b1d      	ldr	r3, [pc, #116]	; (80004a4 <gpio_led_effect_6+0x7c>)
 8000430:	603b      	str	r3, [r7, #0]
	uint8_t i = 200;
 8000432:	23c8      	movs	r3, #200	; 0xc8
 8000434:	71fb      	strb	r3, [r7, #7]
	while (i > 0)
 8000436:	e02d      	b.n	8000494 <gpio_led_effect_6+0x6c>
	{
		for(uint8_t j = 12; j < 16; j++)
 8000438:	230c      	movs	r3, #12
 800043a:	71bb      	strb	r3, [r7, #6]
 800043c:	e024      	b.n	8000488 <gpio_led_effect_6+0x60>
		{
			*GPIOD_ODR |= (0x5<<12);
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f443 42a0 	orr.w	r2, r3, #20480	; 0x5000
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	601a      	str	r2, [r3, #0]
			HAL_Delay(i);
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	4618      	mov	r0, r3
 800044e:	f000 f92b 	bl	80006a8 <HAL_Delay>
			*GPIOD_ODR = 0x00;
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
			HAL_Delay(i);
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	4618      	mov	r0, r3
 800045c:	f000 f924 	bl	80006a8 <HAL_Delay>
			*GPIOD_ODR |= (0xA<<12);
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f443 4220 	orr.w	r2, r3, #40960	; 0xa000
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	601a      	str	r2, [r3, #0]
			HAL_Delay(i);
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	4618      	mov	r0, r3
 8000470:	f000 f91a 	bl	80006a8 <HAL_Delay>
			*GPIOD_ODR = 0x00;
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
			HAL_Delay(i);
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	4618      	mov	r0, r3
 800047e:	f000 f913 	bl	80006a8 <HAL_Delay>
		for(uint8_t j = 12; j < 16; j++)
 8000482:	79bb      	ldrb	r3, [r7, #6]
 8000484:	3301      	adds	r3, #1
 8000486:	71bb      	strb	r3, [r7, #6]
 8000488:	79bb      	ldrb	r3, [r7, #6]
 800048a:	2b0f      	cmp	r3, #15
 800048c:	d9d7      	bls.n	800043e <gpio_led_effect_6+0x16>
		}

		i -= 20;
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	3b14      	subs	r3, #20
 8000492:	71fb      	strb	r3, [r7, #7]
	while (i > 0)
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d1ce      	bne.n	8000438 <gpio_led_effect_6+0x10>
	}
}
 800049a:	bf00      	nop
 800049c:	bf00      	nop
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40020c14 	.word	0x40020c14

080004a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ae:	2300      	movs	r3, #0
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <HAL_MspInit+0x4c>)
 80004b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004b6:	4a0f      	ldr	r2, [pc, #60]	; (80004f4 <HAL_MspInit+0x4c>)
 80004b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004bc:	6453      	str	r3, [r2, #68]	; 0x44
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <HAL_MspInit+0x4c>)
 80004c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ca:	2300      	movs	r3, #0
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <HAL_MspInit+0x4c>)
 80004d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d2:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <HAL_MspInit+0x4c>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d8:	6413      	str	r3, [r2, #64]	; 0x40
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_MspInit+0x4c>)
 80004dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40023800 	.word	0x40023800

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <NMI_Handler+0x4>

080004fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <HardFault_Handler+0x4>

08000504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <MemManage_Handler+0x4>

0800050a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <UsageFault_Handler+0x4>

08000516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000544:	f000 f890 	bl	8000668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <SystemInit+0x20>)
 8000552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <SystemInit+0x20>)
 8000558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800055c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000574:	480d      	ldr	r0, [pc, #52]	; (80005ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000576:	490e      	ldr	r1, [pc, #56]	; (80005b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000578:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800057c:	e002      	b.n	8000584 <LoopCopyDataInit>

0800057e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000582:	3304      	adds	r3, #4

08000584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000588:	d3f9      	bcc.n	800057e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800058c:	4c0b      	ldr	r4, [pc, #44]	; (80005bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000590:	e001      	b.n	8000596 <LoopFillZerobss>

08000592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000594:	3204      	adds	r2, #4

08000596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000598:	d3fb      	bcc.n	8000592 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800059a:	f7ff ffd7 	bl	800054c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800059e:	f000 f98d 	bl	80008bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005a2:	f7ff fe19 	bl	80001d8 <main>
  bx  lr    
 80005a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005b4:	08000924 	.word	0x08000924
  ldr r2, =_sbss
 80005b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005bc:	2000002c 	.word	0x2000002c

080005c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC_IRQHandler>
	...

080005c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <HAL_Init+0x40>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <HAL_Init+0x40>)
 80005ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <HAL_Init+0x40>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <HAL_Init+0x40>)
 80005da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <HAL_Init+0x40>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a07      	ldr	r2, [pc, #28]	; (8000604 <HAL_Init+0x40>)
 80005e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ec:	2003      	movs	r0, #3
 80005ee:	f000 f931 	bl	8000854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005f2:	200f      	movs	r0, #15
 80005f4:	f000 f808 	bl	8000608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f8:	f7ff ff56 	bl	80004a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005fc:	2300      	movs	r3, #0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40023c00 	.word	0x40023c00

08000608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0x54>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_InitTick+0x58>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	4619      	mov	r1, r3
 800061a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000622:	fbb2 f3f3 	udiv	r3, r2, r3
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f93b 	bl	80008a2 <HAL_SYSTICK_Config>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	e00e      	b.n	8000654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b0f      	cmp	r3, #15
 800063a:	d80a      	bhi.n	8000652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800063c:	2200      	movs	r2, #0
 800063e:	6879      	ldr	r1, [r7, #4]
 8000640:	f04f 30ff 	mov.w	r0, #4294967295
 8000644:	f000 f911 	bl	800086a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000648:	4a06      	ldr	r2, [pc, #24]	; (8000664 <HAL_InitTick+0x5c>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800064e:	2300      	movs	r3, #0
 8000650:	e000      	b.n	8000654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000652:	2301      	movs	r3, #1
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000000 	.word	0x20000000
 8000660:	20000008 	.word	0x20000008
 8000664:	20000004 	.word	0x20000004

08000668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_IncTick+0x20>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_IncTick+0x24>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4413      	add	r3, r2
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <HAL_IncTick+0x24>)
 800067a:	6013      	str	r3, [r2, #0]
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000008 	.word	0x20000008
 800068c:	20000028 	.word	0x20000028

08000690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return uwTick;
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <HAL_GetTick+0x14>)
 8000696:	681b      	ldr	r3, [r3, #0]
}
 8000698:	4618      	mov	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000028 	.word	0x20000028

080006a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006b0:	f7ff ffee 	bl	8000690 <HAL_GetTick>
 80006b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c0:	d005      	beq.n	80006ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <HAL_Delay+0x44>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	461a      	mov	r2, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4413      	add	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006ce:	bf00      	nop
 80006d0:	f7ff ffde 	bl	8000690 <HAL_GetTick>
 80006d4:	4602      	mov	r2, r0
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d8f7      	bhi.n	80006d0 <HAL_Delay+0x28>
  {
  }
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000008 	.word	0x20000008

080006f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <__NVIC_SetPriorityGrouping+0x44>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800070c:	4013      	ands	r3, r2
 800070e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800071c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000722:	4a04      	ldr	r2, [pc, #16]	; (8000734 <__NVIC_SetPriorityGrouping+0x44>)
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	60d3      	str	r3, [r2, #12]
}
 8000728:	bf00      	nop
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <__NVIC_GetPriorityGrouping+0x18>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	f003 0307 	and.w	r3, r3, #7
}
 8000746:	4618      	mov	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	6039      	str	r1, [r7, #0]
 800075e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000764:	2b00      	cmp	r3, #0
 8000766:	db0a      	blt.n	800077e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	b2da      	uxtb	r2, r3
 800076c:	490c      	ldr	r1, [pc, #48]	; (80007a0 <__NVIC_SetPriority+0x4c>)
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	0112      	lsls	r2, r2, #4
 8000774:	b2d2      	uxtb	r2, r2
 8000776:	440b      	add	r3, r1
 8000778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800077c:	e00a      	b.n	8000794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4908      	ldr	r1, [pc, #32]	; (80007a4 <__NVIC_SetPriority+0x50>)
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	f003 030f 	and.w	r3, r3, #15
 800078a:	3b04      	subs	r3, #4
 800078c:	0112      	lsls	r2, r2, #4
 800078e:	b2d2      	uxtb	r2, r2
 8000790:	440b      	add	r3, r1
 8000792:	761a      	strb	r2, [r3, #24]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000e100 	.word	0xe000e100
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b089      	sub	sp, #36	; 0x24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	f1c3 0307 	rsb	r3, r3, #7
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	bf28      	it	cs
 80007c6:	2304      	movcs	r3, #4
 80007c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3304      	adds	r3, #4
 80007ce:	2b06      	cmp	r3, #6
 80007d0:	d902      	bls.n	80007d8 <NVIC_EncodePriority+0x30>
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	3b03      	subs	r3, #3
 80007d6:	e000      	b.n	80007da <NVIC_EncodePriority+0x32>
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	f04f 32ff 	mov.w	r2, #4294967295
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	43da      	mvns	r2, r3
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	401a      	ands	r2, r3
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f0:	f04f 31ff 	mov.w	r1, #4294967295
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	43d9      	mvns	r1, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	4313      	orrs	r3, r2
         );
}
 8000802:	4618      	mov	r0, r3
 8000804:	3724      	adds	r7, #36	; 0x24
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
	...

08000810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000820:	d301      	bcc.n	8000826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000822:	2301      	movs	r3, #1
 8000824:	e00f      	b.n	8000846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <SysTick_Config+0x40>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082e:	210f      	movs	r1, #15
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f7ff ff8e 	bl	8000754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <SysTick_Config+0x40>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <SysTick_Config+0x40>)
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	e000e010 	.word	0xe000e010

08000854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff47 	bl	80006f0 <__NVIC_SetPriorityGrouping>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800086a:	b580      	push	{r7, lr}
 800086c:	b086      	sub	sp, #24
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
 8000876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800087c:	f7ff ff5c 	bl	8000738 <__NVIC_GetPriorityGrouping>
 8000880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	6978      	ldr	r0, [r7, #20]
 8000888:	f7ff ff8e 	bl	80007a8 <NVIC_EncodePriority>
 800088c:	4602      	mov	r2, r0
 800088e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff5d 	bl	8000754 <__NVIC_SetPriority>
}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffb0 	bl	8000810 <SysTick_Config>
 80008b0:	4603      	mov	r3, r0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <__libc_init_array>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	4d0d      	ldr	r5, [pc, #52]	; (80008f4 <__libc_init_array+0x38>)
 80008c0:	4c0d      	ldr	r4, [pc, #52]	; (80008f8 <__libc_init_array+0x3c>)
 80008c2:	1b64      	subs	r4, r4, r5
 80008c4:	10a4      	asrs	r4, r4, #2
 80008c6:	2600      	movs	r6, #0
 80008c8:	42a6      	cmp	r6, r4
 80008ca:	d109      	bne.n	80008e0 <__libc_init_array+0x24>
 80008cc:	4d0b      	ldr	r5, [pc, #44]	; (80008fc <__libc_init_array+0x40>)
 80008ce:	4c0c      	ldr	r4, [pc, #48]	; (8000900 <__libc_init_array+0x44>)
 80008d0:	f000 f818 	bl	8000904 <_init>
 80008d4:	1b64      	subs	r4, r4, r5
 80008d6:	10a4      	asrs	r4, r4, #2
 80008d8:	2600      	movs	r6, #0
 80008da:	42a6      	cmp	r6, r4
 80008dc:	d105      	bne.n	80008ea <__libc_init_array+0x2e>
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e4:	4798      	blx	r3
 80008e6:	3601      	adds	r6, #1
 80008e8:	e7ee      	b.n	80008c8 <__libc_init_array+0xc>
 80008ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ee:	4798      	blx	r3
 80008f0:	3601      	adds	r6, #1
 80008f2:	e7f2      	b.n	80008da <__libc_init_array+0x1e>
 80008f4:	0800091c 	.word	0x0800091c
 80008f8:	0800091c 	.word	0x0800091c
 80008fc:	0800091c 	.word	0x0800091c
 8000900:	08000920 	.word	0x08000920

08000904 <_init>:
 8000904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000906:	bf00      	nop
 8000908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800090a:	bc08      	pop	{r3}
 800090c:	469e      	mov	lr, r3
 800090e:	4770      	bx	lr

08000910 <_fini>:
 8000910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000912:	bf00      	nop
 8000914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000916:	bc08      	pop	{r3}
 8000918:	469e      	mov	lr, r3
 800091a:	4770      	bx	lr
