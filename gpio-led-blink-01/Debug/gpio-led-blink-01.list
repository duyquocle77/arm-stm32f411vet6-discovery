
gpio-led-blink-01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007d4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800096c  0800096c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800096c  0800096c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800096c  0800096c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800096c  0800096c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800096c  0800096c  0001096c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000970  08000970  00010970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000980  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000980  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000024f6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000093d  00000000  00000000  00022532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000338  00000000  00000000  00022e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002d0  00000000  00000000  000231a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f6a  00000000  00000000  00023478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003caf  00000000  00000000  000373e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e9d2  00000000  00000000  0003b091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9a63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b3c  00000000  00000000  000b9ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000954 	.word	0x08000954

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000954 	.word	0x08000954

080001d8 <main>:
void gpio_d13_write(uint8_t value);
void gpio_d14_write(uint8_t value);
void gpio_d15_write(uint8_t value);

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	HAL_Init();
 80001de:	f000 fa19 	bl	8000614 <HAL_Init>
	gpio_d12_init();
 80001e2:	f000 f849 	bl	8000278 <gpio_d12_init>
	gpio_d13_init();
 80001e6:	f000 f877 	bl	80002d8 <gpio_d13_init>
	gpio_d14_init();
 80001ea:	f000 f8a5 	bl	8000338 <gpio_d14_init>
	gpio_d15_init();
 80001ee:	f000 f8d3 	bl	8000398 <gpio_d15_init>

	while (1)
	{
		uint8_t i = 200;
 80001f2:	23c8      	movs	r3, #200	; 0xc8
 80001f4:	71fb      	strb	r3, [r7, #7]

		while (i > 0)
 80001f6:	e03a      	b.n	800026e <main+0x96>
		{
			gpio_d12_write(1);
 80001f8:	2001      	movs	r0, #1
 80001fa:	f000 f8fd 	bl	80003f8 <gpio_d12_write>
			HAL_Delay(i);
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	4618      	mov	r0, r3
 8000202:	f000 fa79 	bl	80006f8 <HAL_Delay>
			gpio_d12_write(0);
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f6 	bl	80003f8 <gpio_d12_write>
			HAL_Delay(i);
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fa72 	bl	80006f8 <HAL_Delay>

			gpio_d13_write(1);
 8000214:	2001      	movs	r0, #1
 8000216:	f000 f90f 	bl	8000438 <gpio_d13_write>
			HAL_Delay(i);
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	4618      	mov	r0, r3
 800021e:	f000 fa6b 	bl	80006f8 <HAL_Delay>
			gpio_d13_write(0);
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f908 	bl	8000438 <gpio_d13_write>
			HAL_Delay(i);
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	4618      	mov	r0, r3
 800022c:	f000 fa64 	bl	80006f8 <HAL_Delay>

			gpio_d14_write(1);
 8000230:	2001      	movs	r0, #1
 8000232:	f000 f921 	bl	8000478 <gpio_d14_write>
			HAL_Delay(i);
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fa5d 	bl	80006f8 <HAL_Delay>
			gpio_d14_write(0);
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f91a 	bl	8000478 <gpio_d14_write>
			HAL_Delay(i);
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fa56 	bl	80006f8 <HAL_Delay>

			gpio_d15_write(1);
 800024c:	2001      	movs	r0, #1
 800024e:	f000 f933 	bl	80004b8 <gpio_d15_write>
			HAL_Delay(i);
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fa4f 	bl	80006f8 <HAL_Delay>
			gpio_d15_write(0);
 800025a:	2000      	movs	r0, #0
 800025c:	f000 f92c 	bl	80004b8 <gpio_d15_write>
			HAL_Delay(i);
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fa48 	bl	80006f8 <HAL_Delay>

			i -= 20;
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	3b14      	subs	r3, #20
 800026c:	71fb      	strb	r3, [r7, #7]
		while (i > 0)
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d1c1      	bne.n	80001f8 <main+0x20>
	{
 8000274:	e7bd      	b.n	80001f2 <main+0x1a>
	...

08000278 <gpio_d12_init>:

  return 0;
}

void gpio_d12_init()
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800027e:	2300      	movs	r3, #0
 8000280:	603b      	str	r3, [r7, #0]
 8000282:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <gpio_d12_init+0x58>)
 8000284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000286:	4a12      	ldr	r2, [pc, #72]	; (80002d0 <gpio_d12_init+0x58>)
 8000288:	f043 0308 	orr.w	r3, r3, #8
 800028c:	6313      	str	r3, [r2, #48]	; 0x30
 800028e:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <gpio_d12_init+0x58>)
 8000290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000292:	f003 0308 	and.w	r3, r3, #8
 8000296:	603b      	str	r3, [r7, #0]
 8000298:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  uint32_t *GPIOD_MODER = (uint32_t *)(0x40020c00);
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <gpio_d12_init+0x5c>)
 800029c:	607b      	str	r3, [r7, #4]
  *GPIOD_MODER &= ~(1<<24);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	601a      	str	r2, [r3, #0]
  *GPIOD_MODER &= ~(1<<25);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	601a      	str	r2, [r3, #0]
  *GPIOD_MODER |= (1<<24);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	601a      	str	r2, [r3, #0]
}
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020c00 	.word	0x40020c00

080002d8 <gpio_d13_init>:

void gpio_d13_init()
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002de:	2300      	movs	r3, #0
 80002e0:	603b      	str	r3, [r7, #0]
 80002e2:	4b13      	ldr	r3, [pc, #76]	; (8000330 <gpio_d13_init+0x58>)
 80002e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e6:	4a12      	ldr	r2, [pc, #72]	; (8000330 <gpio_d13_init+0x58>)
 80002e8:	f043 0308 	orr.w	r3, r3, #8
 80002ec:	6313      	str	r3, [r2, #48]	; 0x30
 80002ee:	4b10      	ldr	r3, [pc, #64]	; (8000330 <gpio_d13_init+0x58>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f2:	f003 0308 	and.w	r3, r3, #8
 80002f6:	603b      	str	r3, [r7, #0]
 80002f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  uint32_t *GPIOD_MODER = (uint32_t *)(0x40020c00);
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <gpio_d13_init+0x5c>)
 80002fc:	607b      	str	r3, [r7, #4]
  *GPIOD_MODER &= ~(1<<26);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	601a      	str	r2, [r3, #0]
  *GPIOD_MODER &= ~(1<<27);
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	601a      	str	r2, [r3, #0]
  *GPIOD_MODER |= (1<<26);
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	601a      	str	r2, [r3, #0]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	40020c00 	.word	0x40020c00

08000338 <gpio_d14_init>:

void gpio_d14_init()
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033e:	2300      	movs	r3, #0
 8000340:	603b      	str	r3, [r7, #0]
 8000342:	4b13      	ldr	r3, [pc, #76]	; (8000390 <gpio_d14_init+0x58>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000346:	4a12      	ldr	r2, [pc, #72]	; (8000390 <gpio_d14_init+0x58>)
 8000348:	f043 0308 	orr.w	r3, r3, #8
 800034c:	6313      	str	r3, [r2, #48]	; 0x30
 800034e:	4b10      	ldr	r3, [pc, #64]	; (8000390 <gpio_d14_init+0x58>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000352:	f003 0308 	and.w	r3, r3, #8
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  uint32_t *GPIOD_MODER = (uint32_t *)(0x40020c00);
 800035a:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <gpio_d14_init+0x5c>)
 800035c:	607b      	str	r3, [r7, #4]
  *GPIOD_MODER &= ~(1<<28);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	601a      	str	r2, [r3, #0]
  *GPIOD_MODER &= ~(1<<29);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	601a      	str	r2, [r3, #0]
  *GPIOD_MODER |= (1<<28);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	601a      	str	r2, [r3, #0]
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40023800 	.word	0x40023800
 8000394:	40020c00 	.word	0x40020c00

08000398 <gpio_d15_init>:

void gpio_d15_init()
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800039e:	2300      	movs	r3, #0
 80003a0:	603b      	str	r3, [r7, #0]
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <gpio_d15_init+0x58>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <gpio_d15_init+0x58>)
 80003a8:	f043 0308 	orr.w	r3, r3, #8
 80003ac:	6313      	str	r3, [r2, #48]	; 0x30
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <gpio_d15_init+0x58>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	f003 0308 	and.w	r3, r3, #8
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  uint32_t *GPIOD_MODER = (uint32_t *)(0x40020c00);
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <gpio_d15_init+0x5c>)
 80003bc:	607b      	str	r3, [r7, #4]
  *GPIOD_MODER &= ~(1<<30);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	601a      	str	r2, [r3, #0]
  *GPIOD_MODER &= ~(1<<31);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	601a      	str	r2, [r3, #0]
  *GPIOD_MODER |= (1<<30);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	601a      	str	r2, [r3, #0]
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40023800 	.word	0x40023800
 80003f4:	40020c00 	.word	0x40020c00

080003f8 <gpio_d12_write>:

void gpio_d12_write(uint8_t value)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]
  uint32_t *GPIOD_ODR = (uint32_t *)(0x40020c14);
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <gpio_d12_write+0x3c>)
 8000404:	60fb      	str	r3, [r7, #12]
  if (value == 1)
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d106      	bne.n	800041a <gpio_d12_write+0x22>
	  *GPIOD_ODR |= (1<<12);
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	601a      	str	r2, [r3, #0]
  else
	  *GPIOD_ODR &= ~(1<<12);
}
 8000418:	e005      	b.n	8000426 <gpio_d12_write+0x2e>
	  *GPIOD_ODR &= ~(1<<12);
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	601a      	str	r2, [r3, #0]
}
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40020c14 	.word	0x40020c14

08000438 <gpio_d13_write>:

void gpio_d13_write(uint8_t value)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
  uint32_t *GPIOD_ODR = (uint32_t *)(0x40020c14);
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <gpio_d13_write+0x3c>)
 8000444:	60fb      	str	r3, [r7, #12]
  if (value == 1)
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d106      	bne.n	800045a <gpio_d13_write+0x22>
	  *GPIOD_ODR |= (1<<13);
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	601a      	str	r2, [r3, #0]
  else
	  *GPIOD_ODR &= ~(1<<13);
}
 8000458:	e005      	b.n	8000466 <gpio_d13_write+0x2e>
	  *GPIOD_ODR &= ~(1<<13);
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	601a      	str	r2, [r3, #0]
}
 8000466:	bf00      	nop
 8000468:	3714      	adds	r7, #20
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40020c14 	.word	0x40020c14

08000478 <gpio_d14_write>:

void gpio_d14_write(uint8_t value)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
  uint32_t *GPIOD_ODR = (uint32_t *)(0x40020c14);
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <gpio_d14_write+0x3c>)
 8000484:	60fb      	str	r3, [r7, #12]
  if (value == 1)
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d106      	bne.n	800049a <gpio_d14_write+0x22>
	  *GPIOD_ODR |= (1<<14);
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	601a      	str	r2, [r3, #0]
  else
	  *GPIOD_ODR &= ~(1<<14);
}
 8000498:	e005      	b.n	80004a6 <gpio_d14_write+0x2e>
	  *GPIOD_ODR &= ~(1<<14);
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	601a      	str	r2, [r3, #0]
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40020c14 	.word	0x40020c14

080004b8 <gpio_d15_write>:

void gpio_d15_write(uint8_t value)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
  uint32_t *GPIOD_ODR = (uint32_t *)(0x40020c14);
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <gpio_d15_write+0x3c>)
 80004c4:	60fb      	str	r3, [r7, #12]
  if (value == 1)
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d106      	bne.n	80004da <gpio_d15_write+0x22>
	  *GPIOD_ODR |= (1<<15);
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	601a      	str	r2, [r3, #0]
  else
	  *GPIOD_ODR &= ~(1<<15);
}
 80004d8:	e005      	b.n	80004e6 <gpio_d15_write+0x2e>
	  *GPIOD_ODR &= ~(1<<15);
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	601a      	str	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40020c14 	.word	0x40020c14

080004f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	4b10      	ldr	r3, [pc, #64]	; (8000544 <HAL_MspInit+0x4c>)
 8000504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000506:	4a0f      	ldr	r2, [pc, #60]	; (8000544 <HAL_MspInit+0x4c>)
 8000508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800050c:	6453      	str	r3, [r2, #68]	; 0x44
 800050e:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <HAL_MspInit+0x4c>)
 8000510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	603b      	str	r3, [r7, #0]
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <HAL_MspInit+0x4c>)
 8000520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000522:	4a08      	ldr	r2, [pc, #32]	; (8000544 <HAL_MspInit+0x4c>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000528:	6413      	str	r3, [r2, #64]	; 0x40
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_MspInit+0x4c>)
 800052c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40023800 	.word	0x40023800

08000548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800054c:	e7fe      	b.n	800054c <NMI_Handler+0x4>

0800054e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <HardFault_Handler+0x4>

08000554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <MemManage_Handler+0x4>

0800055a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <BusFault_Handler+0x4>

08000560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <UsageFault_Handler+0x4>

08000566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000594:	f000 f890 	bl	80006b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}

0800059c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <SystemInit+0x20>)
 80005a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <SystemInit+0x20>)
 80005a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005c6:	490e      	ldr	r1, [pc, #56]	; (8000600 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005c8:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005dc:	4c0b      	ldr	r4, [pc, #44]	; (800060c <LoopFillZerobss+0x26>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005ea:	f7ff ffd7 	bl	800059c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ee:	f000 f98d 	bl	800090c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005f2:	f7ff fdf1 	bl	80001d8 <main>
  bx  lr    
 80005f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000604:	08000974 	.word	0x08000974
  ldr r2, =_sbss
 8000608:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800060c:	2000002c 	.word	0x2000002c

08000610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC_IRQHandler>
	...

08000614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_Init+0x40>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <HAL_Init+0x40>)
 800061e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000622:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <HAL_Init+0x40>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <HAL_Init+0x40>)
 800062a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800062e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <HAL_Init+0x40>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <HAL_Init+0x40>)
 8000636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800063a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063c:	2003      	movs	r0, #3
 800063e:	f000 f931 	bl	80008a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000642:	200f      	movs	r0, #15
 8000644:	f000 f808 	bl	8000658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000648:	f7ff ff56 	bl	80004f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023c00 	.word	0x40023c00

08000658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_InitTick+0x54>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_InitTick+0x58>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4619      	mov	r1, r3
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000672:	fbb2 f3f3 	udiv	r3, r2, r3
 8000676:	4618      	mov	r0, r3
 8000678:	f000 f93b 	bl	80008f2 <HAL_SYSTICK_Config>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000682:	2301      	movs	r3, #1
 8000684:	e00e      	b.n	80006a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b0f      	cmp	r3, #15
 800068a:	d80a      	bhi.n	80006a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068c:	2200      	movs	r2, #0
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	f04f 30ff 	mov.w	r0, #4294967295
 8000694:	f000 f911 	bl	80008ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <HAL_InitTick+0x5c>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800069e:	2300      	movs	r3, #0
 80006a0:	e000      	b.n	80006a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000008 	.word	0x20000008
 80006b4:	20000004 	.word	0x20000004

080006b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_IncTick+0x20>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_IncTick+0x24>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4413      	add	r3, r2
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <HAL_IncTick+0x24>)
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000008 	.word	0x20000008
 80006dc:	20000028 	.word	0x20000028

080006e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return uwTick;
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <HAL_GetTick+0x14>)
 80006e6:	681b      	ldr	r3, [r3, #0]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000028 	.word	0x20000028

080006f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000700:	f7ff ffee 	bl	80006e0 <HAL_GetTick>
 8000704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000710:	d005      	beq.n	800071e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <HAL_Delay+0x44>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4413      	add	r3, r2
 800071c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800071e:	bf00      	nop
 8000720:	f7ff ffde 	bl	80006e0 <HAL_GetTick>
 8000724:	4602      	mov	r2, r0
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	429a      	cmp	r2, r3
 800072e:	d8f7      	bhi.n	8000720 <HAL_Delay+0x28>
  {
  }
}
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000008 	.word	0x20000008

08000740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800076c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000772:	4a04      	ldr	r2, [pc, #16]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	60d3      	str	r3, [r2, #12]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <__NVIC_GetPriorityGrouping+0x18>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	f003 0307 	and.w	r3, r3, #7
}
 8000796:	4618      	mov	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	db0a      	blt.n	80007ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	490c      	ldr	r1, [pc, #48]	; (80007f0 <__NVIC_SetPriority+0x4c>)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	0112      	lsls	r2, r2, #4
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	440b      	add	r3, r1
 80007c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007cc:	e00a      	b.n	80007e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4908      	ldr	r1, [pc, #32]	; (80007f4 <__NVIC_SetPriority+0x50>)
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	3b04      	subs	r3, #4
 80007dc:	0112      	lsls	r2, r2, #4
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	440b      	add	r3, r1
 80007e2:	761a      	strb	r2, [r3, #24]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000e100 	.word	0xe000e100
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b089      	sub	sp, #36	; 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	f1c3 0307 	rsb	r3, r3, #7
 8000812:	2b04      	cmp	r3, #4
 8000814:	bf28      	it	cs
 8000816:	2304      	movcs	r3, #4
 8000818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3304      	adds	r3, #4
 800081e:	2b06      	cmp	r3, #6
 8000820:	d902      	bls.n	8000828 <NVIC_EncodePriority+0x30>
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3b03      	subs	r3, #3
 8000826:	e000      	b.n	800082a <NVIC_EncodePriority+0x32>
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	f04f 32ff 	mov.w	r2, #4294967295
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43da      	mvns	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	401a      	ands	r2, r3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000840:	f04f 31ff 	mov.w	r1, #4294967295
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	fa01 f303 	lsl.w	r3, r1, r3
 800084a:	43d9      	mvns	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	4313      	orrs	r3, r2
         );
}
 8000852:	4618      	mov	r0, r3
 8000854:	3724      	adds	r7, #36	; 0x24
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000870:	d301      	bcc.n	8000876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000872:	2301      	movs	r3, #1
 8000874:	e00f      	b.n	8000896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <SysTick_Config+0x40>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087e:	210f      	movs	r1, #15
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f7ff ff8e 	bl	80007a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <SysTick_Config+0x40>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088e:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <SysTick_Config+0x40>)
 8000890:	2207      	movs	r2, #7
 8000892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	e000e010 	.word	0xe000e010

080008a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ff47 	bl	8000740 <__NVIC_SetPriorityGrouping>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b086      	sub	sp, #24
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4603      	mov	r3, r0
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
 80008c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008cc:	f7ff ff5c 	bl	8000788 <__NVIC_GetPriorityGrouping>
 80008d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	6978      	ldr	r0, [r7, #20]
 80008d8:	f7ff ff8e 	bl	80007f8 <NVIC_EncodePriority>
 80008dc:	4602      	mov	r2, r0
 80008de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff5d 	bl	80007a4 <__NVIC_SetPriority>
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ffb0 	bl	8000860 <SysTick_Config>
 8000900:	4603      	mov	r3, r0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <__libc_init_array>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	4d0d      	ldr	r5, [pc, #52]	; (8000944 <__libc_init_array+0x38>)
 8000910:	4c0d      	ldr	r4, [pc, #52]	; (8000948 <__libc_init_array+0x3c>)
 8000912:	1b64      	subs	r4, r4, r5
 8000914:	10a4      	asrs	r4, r4, #2
 8000916:	2600      	movs	r6, #0
 8000918:	42a6      	cmp	r6, r4
 800091a:	d109      	bne.n	8000930 <__libc_init_array+0x24>
 800091c:	4d0b      	ldr	r5, [pc, #44]	; (800094c <__libc_init_array+0x40>)
 800091e:	4c0c      	ldr	r4, [pc, #48]	; (8000950 <__libc_init_array+0x44>)
 8000920:	f000 f818 	bl	8000954 <_init>
 8000924:	1b64      	subs	r4, r4, r5
 8000926:	10a4      	asrs	r4, r4, #2
 8000928:	2600      	movs	r6, #0
 800092a:	42a6      	cmp	r6, r4
 800092c:	d105      	bne.n	800093a <__libc_init_array+0x2e>
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f855 3b04 	ldr.w	r3, [r5], #4
 8000934:	4798      	blx	r3
 8000936:	3601      	adds	r6, #1
 8000938:	e7ee      	b.n	8000918 <__libc_init_array+0xc>
 800093a:	f855 3b04 	ldr.w	r3, [r5], #4
 800093e:	4798      	blx	r3
 8000940:	3601      	adds	r6, #1
 8000942:	e7f2      	b.n	800092a <__libc_init_array+0x1e>
 8000944:	0800096c 	.word	0x0800096c
 8000948:	0800096c 	.word	0x0800096c
 800094c:	0800096c 	.word	0x0800096c
 8000950:	08000970 	.word	0x08000970

08000954 <_init>:
 8000954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000956:	bf00      	nop
 8000958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800095a:	bc08      	pop	{r3}
 800095c:	469e      	mov	lr, r3
 800095e:	4770      	bx	lr

08000960 <_fini>:
 8000960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000962:	bf00      	nop
 8000964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000966:	bc08      	pop	{r3}
 8000968:	469e      	mov	lr, r3
 800096a:	4770      	bx	lr
