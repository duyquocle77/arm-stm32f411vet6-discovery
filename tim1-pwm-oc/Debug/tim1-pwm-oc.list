
tim1-pwm-oc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006b0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000848  08000848  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000848  08000848  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000848  08000848  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000848  08000848  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000848  08000848  00010848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800084c  0800084c  0001084c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  0800085c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  0800085c  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000252e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000996  00000000  00000000  0002256a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000320  00000000  00000000  00022f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002b8  00000000  00000000  00023220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001476a  00000000  00000000  000234d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003edb  00000000  00000000  00037c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000817d5  00000000  00000000  0003bb1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bd2f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ae4  00000000  00000000  000bd344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000830 	.word	0x08000830

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000830 	.word	0x08000830

080001d8 <main>:

uint8_t flag = 0;	/*this flag is status of button*/
uint8_t cnt = 0;	/*this flag is to debug*/

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	HAL_Init();
 80001dc:	f000 f9aa 	bl	8000534 <HAL_Init>

	vectortable_move();
 80001e0:	f000 f81e 	bl	8000220 <vectortable_move>
	tim4_pwm_ch1_init();
 80001e4:	f000 f87a 	bl	80002dc <tim4_pwm_ch1_init>
	tim_systick_init();
 80001e8:	f000 f836 	bl	8000258 <tim_systick_init>

	while (1)
	{
		static uint8_t dim = 0;
		while(dim <= 100)
 80001ec:	e00d      	b.n	800020a <main+0x32>
		{
			tim4_pwm_ch1(dim);
 80001ee:	4b0b      	ldr	r3, [pc, #44]	; (800021c <main+0x44>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 f8ba 	bl	800036c <tim4_pwm_ch1>
			dim += 10;
 80001f8:	4b08      	ldr	r3, [pc, #32]	; (800021c <main+0x44>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	330a      	adds	r3, #10
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <main+0x44>)
 8000202:	701a      	strb	r2, [r3, #0]
			tim_systick_delay_ms(100);
 8000204:	2064      	movs	r0, #100	; 0x64
 8000206:	f000 f847 	bl	8000298 <tim_systick_delay_ms>
		while(dim <= 100)
 800020a:	4b04      	ldr	r3, [pc, #16]	; (800021c <main+0x44>)
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	2b64      	cmp	r3, #100	; 0x64
 8000210:	d9ed      	bls.n	80001ee <main+0x16>
		}
		dim = 0;
 8000212:	4b02      	ldr	r3, [pc, #8]	; (800021c <main+0x44>)
 8000214:	2200      	movs	r2, #0
 8000216:	701a      	strb	r2, [r3, #0]
	{
 8000218:	e7e8      	b.n	80001ec <main+0x14>
 800021a:	bf00      	nop
 800021c:	20000028 	.word	0x20000028

08000220 <vectortable_move>:
 * @brief	: move vector table from FLASH to RAM
 * @param	: None
 * @retval	: None
 */
void vectortable_move()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
	/*
	 * size(vector_table) = 0x194 + 0x4 - 0x00 = 0x198
	 * */
	/* move vector table from flash to ram */
	void *volatile dst = (void *volatile)0x20000000;	// RAM_address
 8000226:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800022a:	60bb      	str	r3, [r7, #8]
	void *volatile src = (void *volatile)0x08000000;	// FLASH_address
 800022c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000230:	607b      	str	r3, [r7, #4]
	memcpy(dst, src, 0x198);
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	6879      	ldr	r1, [r7, #4]
 8000236:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800023a:	4618      	mov	r0, r3
 800023c:	f000 faea 	bl	8000814 <memcpy>

	/**/
	uint32_t *VTOR = (uint32_t *)(0xE000ED08);
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <vectortable_move+0x34>)
 8000242:	60fb      	str	r3, [r7, #12]
	*VTOR = 0x20000000;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800024a:	601a      	str	r2, [r3, #0]
}
 800024c:	bf00      	nop
 800024e:	3710      	adds	r7, #16
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	e000ed08 	.word	0xe000ed08

08000258 <tim_systick_init>:

void tim_systick_init()
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
	uint32_t *CSR = (uint32_t *)(0xe000e010 + 0x00);
 800025e:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <tim_systick_init+0x38>)
 8000260:	607b      	str	r3, [r7, #4]
	/*enable clock*/
	*CSR |= (1<<2);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f043 0204 	orr.w	r2, r3, #4
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
	/*enable the counter*/
	*CSR |= (1<<0);
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f043 0201 	orr.w	r2, r3, #1
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	601a      	str	r2, [r3, #0]
	 * F = 16 000 000hz
	 * prescaler = 1 -> f = 16000000 hz -> t = 16*10^-6 s
	 * T = 0.01s
	 * T = N*t -> N = 160 000;
	 * */
	uint32_t *RVR = (uint32_t *)(0xe000e010 + 0x00);
 800027a:	4b05      	ldr	r3, [pc, #20]	; (8000290 <tim_systick_init+0x38>)
 800027c:	603b      	str	r3, [r7, #0]
	*RVR = 160000 - 1;
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <tim_systick_init+0x3c>)
 8000282:	601a      	str	r2, [r3, #0]
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	e000e010 	.word	0xe000e010
 8000294:	000270ff 	.word	0x000270ff

08000298 <tim_systick_delay_ms>:

void tim_systick_delay_ms(uint32_t time_milisec)
{
 8000298:	b480      	push	{r7}
 800029a:	b085      	sub	sp, #20
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	uint32_t *CSR = (uint32_t *)(0xe000e010 + 0x00);
 80002a0:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <tim_systick_delay_ms+0x40>)
 80002a2:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0; i <= time_milisec; i++)
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e00a      	b.n	80002c0 <tim_systick_delay_ms+0x28>
		while(((*CSR>>16)&1)==0);
 80002aa:	bf00      	nop
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	0c1b      	lsrs	r3, r3, #16
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d0f8      	beq.n	80002ac <tim_systick_delay_ms+0x14>
	for(uint32_t i = 0; i <= time_milisec; i++)
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	3301      	adds	r3, #1
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	68fa      	ldr	r2, [r7, #12]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d9f0      	bls.n	80002aa <tim_systick_delay_ms+0x12>
}
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	3714      	adds	r7, #20
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e010 	.word	0xe000e010

080002dc <tim4_pwm_ch1_init>:

void tim4_pwm_ch1_init()
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80002e2:	2300      	movs	r3, #0
 80002e4:	607b      	str	r3, [r7, #4]
 80002e6:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <tim4_pwm_ch1_init+0x84>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ea:	4a1d      	ldr	r2, [pc, #116]	; (8000360 <tim4_pwm_ch1_init+0x84>)
 80002ec:	f043 0308 	orr.w	r3, r3, #8
 80002f0:	6313      	str	r3, [r2, #48]	; 0x30
 80002f2:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <tim4_pwm_ch1_init+0x84>)
 80002f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f6:	f003 0308 	and.w	r3, r3, #8
 80002fa:	607b      	str	r3, [r7, #4]
 80002fc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_TIM4_CLK_ENABLE();
 80002fe:	2300      	movs	r3, #0
 8000300:	603b      	str	r3, [r7, #0]
 8000302:	4b17      	ldr	r3, [pc, #92]	; (8000360 <tim4_pwm_ch1_init+0x84>)
 8000304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000306:	4a16      	ldr	r2, [pc, #88]	; (8000360 <tim4_pwm_ch1_init+0x84>)
 8000308:	f043 0304 	orr.w	r3, r3, #4
 800030c:	6413      	str	r3, [r2, #64]	; 0x40
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <tim4_pwm_ch1_init+0x84>)
 8000310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000312:	f003 0304 	and.w	r3, r3, #4
 8000316:	603b      	str	r3, [r7, #0]
 8000318:	683b      	ldr	r3, [r7, #0]

	/*alternate mode*/
	uint32_t *GPIOD_MODER = (uint32_t *)(0x40020c00 + 0x00);
 800031a:	4b12      	ldr	r3, [pc, #72]	; (8000364 <tim4_pwm_ch1_init+0x88>)
 800031c:	60fb      	str	r3, [r7, #12]
	*GPIOD_MODER &= ~(0b11<<24);
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (1<<25);
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	601a      	str	r2, [r3, #0]

	/*alternate function 2*/
	uint32_t *GPIOD_AFRH = (uint32_t *)(0x40020c00 + 0x24);
 8000336:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <tim4_pwm_ch1_init+0x8c>)
 8000338:	60bb      	str	r3, [r7, #8]
	*GPIOD_AFRH &= ~(0b1111<<16);
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	601a      	str	r2, [r3, #0]
	*GPIOD_AFRH |= (1<<17);
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	601a      	str	r2, [r3, #0]
}
 8000352:	bf00      	nop
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40023800 	.word	0x40023800
 8000364:	40020c00 	.word	0x40020c00
 8000368:	40020c24 	.word	0x40020c24

0800036c <tim4_pwm_ch1>:

void tim4_pwm_ch1(uint8_t duty_cycle)
{
 800036c:	b480      	push	{r7}
 800036e:	b089      	sub	sp, #36	; 0x24
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
	 * T = 0.001s = 1000 x ns
	 * N = 1000 < 65535
	 * t = 10^-6ms -> f = 1000000hz
	 * F = 16 000 000hz -> pre-scaler = F/f = 16
	 * */
	uint32_t *ARR = (uint32_t *)(0x40000800 + 0x2c);
 8000376:	4b21      	ldr	r3, [pc, #132]	; (80003fc <tim4_pwm_ch1+0x90>)
 8000378:	61fb      	str	r3, [r7, #28]
	*ARR = 1000 - 1;
 800037a:	69fb      	ldr	r3, [r7, #28]
 800037c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000380:	601a      	str	r2, [r3, #0]
	uint32_t *PCR = (uint32_t *)(0x40000800 + 0x28);
 8000382:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <tim4_pwm_ch1+0x94>)
 8000384:	61bb      	str	r3, [r7, #24]
	*PCR = 16 - 1;			//prescaler  = (PCR + 1)
 8000386:	69bb      	ldr	r3, [r7, #24]
 8000388:	220f      	movs	r2, #15
 800038a:	601a      	str	r2, [r3, #0]

	uint32_t *CCR1 = (uint32_t *)(0x40000800 + 0x34);
 800038c:	4b1d      	ldr	r3, [pc, #116]	; (8000404 <tim4_pwm_ch1+0x98>)
 800038e:	617b      	str	r3, [r7, #20]
	*CCR1 = (duty_cycle * (*ARR + 1)) / 100;
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	69fa      	ldr	r2, [r7, #28]
 8000394:	6812      	ldr	r2, [r2, #0]
 8000396:	3201      	adds	r2, #1
 8000398:	fb02 f303 	mul.w	r3, r2, r3
 800039c:	4a1a      	ldr	r2, [pc, #104]	; (8000408 <tim4_pwm_ch1+0x9c>)
 800039e:	fba2 2303 	umull	r2, r3, r2, r3
 80003a2:	095a      	lsrs	r2, r3, #5
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	601a      	str	r2, [r3, #0]

	/*start count*/
	/*enable counter CEN bit*/
	uint32_t *CR1 = (uint32_t *)(0x40000800 + 0x00);
 80003a8:	4b18      	ldr	r3, [pc, #96]	; (800040c <tim4_pwm_ch1+0xa0>)
 80003aa:	613b      	str	r3, [r7, #16]
	*CR1 |= (1 << 0);
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f043 0201 	orr.w	r2, r3, #1
 80003b4:	693b      	ldr	r3, [r7, #16]
 80003b6:	601a      	str	r2, [r3, #0]
	/*up-counter mode*/
	*CR1 &= ~(1 << 4);
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f023 0210 	bic.w	r2, r3, #16
 80003c0:	693b      	ldr	r3, [r7, #16]
 80003c2:	601a      	str	r2, [r3, #0]

	/*pwm mode 1: CNT < CCR1 -> active*/
	uint32_t *CCMR1 = (uint32_t *)(0x40000800 + 0x18);
 80003c4:	4b12      	ldr	r3, [pc, #72]	; (8000410 <tim4_pwm_ch1+0xa4>)
 80003c6:	60fb      	str	r3, [r7, #12]
	*CCMR1 &= ~(0b111<<4);
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	601a      	str	r2, [r3, #0]
	*CCMR1 |= (0b11 << 5);
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	601a      	str	r2, [r3, #0]

	/*enable OC1*/
	uint32_t *CCER = (uint32_t *)(0x40000800 + 0x20);
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <tim4_pwm_ch1+0xa8>)
 80003e2:	60bb      	str	r3, [r7, #8]
	*CCER |= (1 << 0);
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f043 0201 	orr.w	r2, r3, #1
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	601a      	str	r2, [r3, #0]
}
 80003f0:	bf00      	nop
 80003f2:	3724      	adds	r7, #36	; 0x24
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	4000082c 	.word	0x4000082c
 8000400:	40000828 	.word	0x40000828
 8000404:	40000834 	.word	0x40000834
 8000408:	51eb851f 	.word	0x51eb851f
 800040c:	40000800 	.word	0x40000800
 8000410:	40000818 	.word	0x40000818
 8000414:	40000820 	.word	0x40000820

08000418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041e:	2300      	movs	r3, #0
 8000420:	607b      	str	r3, [r7, #4]
 8000422:	4b10      	ldr	r3, [pc, #64]	; (8000464 <HAL_MspInit+0x4c>)
 8000424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000426:	4a0f      	ldr	r2, [pc, #60]	; (8000464 <HAL_MspInit+0x4c>)
 8000428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800042c:	6453      	str	r3, [r2, #68]	; 0x44
 800042e:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <HAL_MspInit+0x4c>)
 8000430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043a:	2300      	movs	r3, #0
 800043c:	603b      	str	r3, [r7, #0]
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <HAL_MspInit+0x4c>)
 8000440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000442:	4a08      	ldr	r2, [pc, #32]	; (8000464 <HAL_MspInit+0x4c>)
 8000444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000448:	6413      	str	r3, [r2, #64]	; 0x40
 800044a:	4b06      	ldr	r3, [pc, #24]	; (8000464 <HAL_MspInit+0x4c>)
 800044c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800044e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000452:	603b      	str	r3, [r7, #0]
 8000454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40023800 	.word	0x40023800

08000468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800046c:	e7fe      	b.n	800046c <NMI_Handler+0x4>

0800046e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000472:	e7fe      	b.n	8000472 <HardFault_Handler+0x4>

08000474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000478:	e7fe      	b.n	8000478 <MemManage_Handler+0x4>

0800047a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800047e:	e7fe      	b.n	800047e <BusFault_Handler+0x4>

08000480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000484:	e7fe      	b.n	8000484 <UsageFault_Handler+0x4>

08000486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b4:	f000 f890 	bl	80005d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}

080004bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <SystemInit+0x20>)
 80004c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004c6:	4a05      	ldr	r2, [pc, #20]	; (80004dc <SystemInit+0x20>)
 80004c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000518 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004e4:	480d      	ldr	r0, [pc, #52]	; (800051c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004e6:	490e      	ldr	r1, [pc, #56]	; (8000520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004e8:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004fc:	4c0b      	ldr	r4, [pc, #44]	; (800052c <LoopFillZerobss+0x26>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800050a:	f7ff ffd7 	bl	80004bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050e:	f000 f95d 	bl	80007cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000512:	f7ff fe61 	bl	80001d8 <main>
  bx  lr    
 8000516:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000518:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000524:	08000850 	.word	0x08000850
  ldr r2, =_sbss
 8000528:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800052c:	20000030 	.word	0x20000030

08000530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC_IRQHandler>
	...

08000534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <HAL_Init+0x40>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <HAL_Init+0x40>)
 800053e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <HAL_Init+0x40>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <HAL_Init+0x40>)
 800054a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800054e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <HAL_Init+0x40>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a07      	ldr	r2, [pc, #28]	; (8000574 <HAL_Init+0x40>)
 8000556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800055a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 f901 	bl	8000764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000562:	200f      	movs	r0, #15
 8000564:	f000 f808 	bl	8000578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000568:	f7ff ff56 	bl	8000418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800056c:	2300      	movs	r3, #0
}
 800056e:	4618      	mov	r0, r3
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40023c00 	.word	0x40023c00

08000578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <HAL_InitTick+0x54>)
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <HAL_InitTick+0x58>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4619      	mov	r1, r3
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000592:	fbb2 f3f3 	udiv	r3, r2, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f90b 	bl	80007b2 <HAL_SYSTICK_Config>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
 80005a4:	e00e      	b.n	80005c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b0f      	cmp	r3, #15
 80005aa:	d80a      	bhi.n	80005c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ac:	2200      	movs	r2, #0
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	f04f 30ff 	mov.w	r0, #4294967295
 80005b4:	f000 f8e1 	bl	800077a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <HAL_InitTick+0x5c>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005be:	2300      	movs	r3, #0
 80005c0:	e000      	b.n	80005c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000000 	.word	0x20000000
 80005d0:	20000008 	.word	0x20000008
 80005d4:	20000004 	.word	0x20000004

080005d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_IncTick+0x20>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <HAL_IncTick+0x24>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <HAL_IncTick+0x24>)
 80005ea:	6013      	str	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000008 	.word	0x20000008
 80005fc:	2000002c 	.word	0x2000002c

08000600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000632:	4a04      	ldr	r2, [pc, #16]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	60d3      	str	r3, [r2, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <__NVIC_GetPriorityGrouping+0x18>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	f003 0307 	and.w	r3, r3, #7
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	db0a      	blt.n	800068e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	b2da      	uxtb	r2, r3
 800067c:	490c      	ldr	r1, [pc, #48]	; (80006b0 <__NVIC_SetPriority+0x4c>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	0112      	lsls	r2, r2, #4
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440b      	add	r3, r1
 8000688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800068c:	e00a      	b.n	80006a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <__NVIC_SetPriority+0x50>)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	f003 030f 	and.w	r3, r3, #15
 800069a:	3b04      	subs	r3, #4
 800069c:	0112      	lsls	r2, r2, #4
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	440b      	add	r3, r1
 80006a2:	761a      	strb	r2, [r3, #24]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000e100 	.word	0xe000e100
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b089      	sub	sp, #36	; 0x24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	f1c3 0307 	rsb	r3, r3, #7
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	bf28      	it	cs
 80006d6:	2304      	movcs	r3, #4
 80006d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3304      	adds	r3, #4
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d902      	bls.n	80006e8 <NVIC_EncodePriority+0x30>
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3b03      	subs	r3, #3
 80006e6:	e000      	b.n	80006ea <NVIC_EncodePriority+0x32>
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	f04f 32ff 	mov.w	r2, #4294967295
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	43da      	mvns	r2, r3
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	401a      	ands	r2, r3
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000700:	f04f 31ff 	mov.w	r1, #4294967295
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	43d9      	mvns	r1, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	4313      	orrs	r3, r2
         );
}
 8000712:	4618      	mov	r0, r3
 8000714:	3724      	adds	r7, #36	; 0x24
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
	...

08000720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000730:	d301      	bcc.n	8000736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000732:	2301      	movs	r3, #1
 8000734:	e00f      	b.n	8000756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <SysTick_Config+0x40>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073e:	210f      	movs	r1, #15
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f7ff ff8e 	bl	8000664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <SysTick_Config+0x40>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <SysTick_Config+0x40>)
 8000750:	2207      	movs	r2, #7
 8000752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	e000e010 	.word	0xe000e010

08000764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ff47 	bl	8000600 <__NVIC_SetPriorityGrouping>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800078c:	f7ff ff5c 	bl	8000648 <__NVIC_GetPriorityGrouping>
 8000790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	68b9      	ldr	r1, [r7, #8]
 8000796:	6978      	ldr	r0, [r7, #20]
 8000798:	f7ff ff8e 	bl	80006b8 <NVIC_EncodePriority>
 800079c:	4602      	mov	r2, r0
 800079e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff5d 	bl	8000664 <__NVIC_SetPriority>
}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ffb0 	bl	8000720 <SysTick_Config>
 80007c0:	4603      	mov	r3, r0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <__libc_init_array>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	4d0d      	ldr	r5, [pc, #52]	; (8000804 <__libc_init_array+0x38>)
 80007d0:	4c0d      	ldr	r4, [pc, #52]	; (8000808 <__libc_init_array+0x3c>)
 80007d2:	1b64      	subs	r4, r4, r5
 80007d4:	10a4      	asrs	r4, r4, #2
 80007d6:	2600      	movs	r6, #0
 80007d8:	42a6      	cmp	r6, r4
 80007da:	d109      	bne.n	80007f0 <__libc_init_array+0x24>
 80007dc:	4d0b      	ldr	r5, [pc, #44]	; (800080c <__libc_init_array+0x40>)
 80007de:	4c0c      	ldr	r4, [pc, #48]	; (8000810 <__libc_init_array+0x44>)
 80007e0:	f000 f826 	bl	8000830 <_init>
 80007e4:	1b64      	subs	r4, r4, r5
 80007e6:	10a4      	asrs	r4, r4, #2
 80007e8:	2600      	movs	r6, #0
 80007ea:	42a6      	cmp	r6, r4
 80007ec:	d105      	bne.n	80007fa <__libc_init_array+0x2e>
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007f4:	4798      	blx	r3
 80007f6:	3601      	adds	r6, #1
 80007f8:	e7ee      	b.n	80007d8 <__libc_init_array+0xc>
 80007fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80007fe:	4798      	blx	r3
 8000800:	3601      	adds	r6, #1
 8000802:	e7f2      	b.n	80007ea <__libc_init_array+0x1e>
 8000804:	08000848 	.word	0x08000848
 8000808:	08000848 	.word	0x08000848
 800080c:	08000848 	.word	0x08000848
 8000810:	0800084c 	.word	0x0800084c

08000814 <memcpy>:
 8000814:	440a      	add	r2, r1
 8000816:	4291      	cmp	r1, r2
 8000818:	f100 33ff 	add.w	r3, r0, #4294967295
 800081c:	d100      	bne.n	8000820 <memcpy+0xc>
 800081e:	4770      	bx	lr
 8000820:	b510      	push	{r4, lr}
 8000822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000826:	f803 4f01 	strb.w	r4, [r3, #1]!
 800082a:	4291      	cmp	r1, r2
 800082c:	d1f9      	bne.n	8000822 <memcpy+0xe>
 800082e:	bd10      	pop	{r4, pc}

08000830 <_init>:
 8000830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000832:	bf00      	nop
 8000834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000836:	bc08      	pop	{r3}
 8000838:	469e      	mov	lr, r3
 800083a:	4770      	bx	lr

0800083c <_fini>:
 800083c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083e:	bf00      	nop
 8000840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000842:	bc08      	pop	{r3}
 8000844:	469e      	mov	lr, r3
 8000846:	4770      	bx	lr
